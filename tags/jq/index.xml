<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jq on On The Dock</title>
    <link>https://onthedock.github.io/tags/jq/</link>
    <description>Recent content in jq on On The Dock</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Handmade with &amp;#9829; by Xavi Aznar</copyright>
    <lastBuildDate>Wed, 11 Jan 2023 20:51:00 +0100</lastBuildDate><atom:link href="https://onthedock.github.io/tags/jq/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Convertir un fichero CSV en JSON usando Jq</title>
      <link>https://onthedock.github.io/post/230111-convertir-csv-en-json/</link>
      <pubDate>Wed, 11 Jan 2023 20:51:00 +0100</pubDate>
      
      <guid>https://onthedock.github.io/post/230111-convertir-csv-en-json/</guid>
      <description>&lt;p&gt;Una de las automatizaciones que hemos desarrollado consiste en un &lt;em&gt;autoservicio&lt;/em&gt; para que los clientes puedan gestionar políticas en un &lt;em&gt;proxy&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El usuario genera un fichero CSV con varios parámetros y los &amp;ldquo;sube&amp;rdquo; a un repositorio Git en su proyecto. El evento desencadena la ejecución de una &lt;em&gt;pipeline&lt;/em&gt; en la que procesamos el fichero, validamos su contenido, etc. Una vez &lt;em&gt;procesados&lt;/em&gt;, construimos un objeto JSON para cada una de las reglas, las agregamos y finalmente las integramos en el documento de configuración del &lt;em&gt;proxy&lt;/em&gt; del cliente (que contiene otros campos que el cliente no debe editar).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exprimiendo jq: cómo manipular ficheros JSON</title>
      <link>https://onthedock.github.io/post/221012-exprimiendo-jq/</link>
      <pubDate>Wed, 12 Oct 2022 13:50:16 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/221012-exprimiendo-jq/</guid>
      <description>&lt;p&gt;En esta entrada describo un caso práctico sobre cómo manipular un documento JSON (una &lt;em&gt;IAM Policy&lt;/em&gt; de Google Cloud) para añadir un nuevo miembro a un rol determinado.&lt;/p&gt;
&lt;p&gt;Las políticas pueden gestionarse directamente mediante la herramienta de línea de comandos &lt;code&gt;gcloud&lt;/code&gt;, por ejemplo, sobre un &lt;a href=&#34;https://cloud.google.com/sdk/gcloud/reference/projects/add-iam-policy-binding&#34;&gt;&lt;em&gt;folder&lt;/em&gt;&lt;/a&gt;. Sin embargo puede ser interesante disponer de un registro con el &lt;em&gt;estado deseado&lt;/em&gt; de los permisos de los recursos y así evitar &lt;em&gt;drift&lt;/em&gt; (por ejemplo, si alguien modifica los permisos mediante &lt;code&gt;gcloud&lt;/code&gt; o desde la consola).&lt;/p&gt;
&lt;p&gt;Aunque el ejemplo se centra en un fichero de políticas de GCP, la entrada describe técnicas aplicables a la manipulación de cualquier fichero JSON.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sacando partido de la funcionalidad de jq</title>
      <link>https://onthedock.github.io/post/220519-jq/</link>
      <pubDate>Thu, 19 May 2022 20:05:53 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/220519-jq/</guid>
      <description>&lt;p&gt;Siguendo con el &lt;a href=&#34;https://onthedock.github.io/post/220518-obtener-respuesta-y-http-status-con-curl/&#34;&gt;tema de ayer&lt;/a&gt;, hoy quiero revisar otro bloque de código.&lt;/p&gt;
&lt;p&gt;En este caso, se construye un &lt;em&gt;array&lt;/em&gt; en JSON usando Bash &lt;em&gt;puro&lt;/em&gt;, cuando es el proceso se simplifica &lt;strong&gt;enormemente&lt;/strong&gt; gracias a la función &lt;code&gt;--slurp&lt;/code&gt; de &lt;code&gt;jq&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
