<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Script on On The Dock</title>
    <link>https://onthedock.github.io/tags/script/</link>
    <description>Recent content in Script on On The Dock</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>Handmade with &amp;#9829; by Xavi Aznar</copyright>
    <lastBuildDate>Thu, 31 Jul 2025 22:35:09 +0200</lastBuildDate>
    <atom:link href="https://onthedock.github.io/tags/script/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Encadena funciones en tus scripts de Bash usando pipes</title>
      <link>https://onthedock.github.io/post/20250731-encadena-funciones-en-tus-scripts-de-bash-usando-pipes/</link>
      <pubDate>Thu, 31 Jul 2025 22:35:09 +0200</pubDate>
      <guid>https://onthedock.github.io/post/20250731-encadena-funciones-en-tus-scripts-de-bash-usando-pipes/</guid>
      <description>&lt;p&gt;Uno de los pilares de Linux es que es un sistema compuesto por pequeñas utilizadades que hacen una cosa, pero la hacen extremadamente bien.&#xA;Podemos combinar la salida de un comando y enviarla, como &lt;em&gt;input&lt;/em&gt;, a otro comando usando la &lt;code&gt;pipe&lt;/code&gt; (&lt;code&gt;|&lt;/code&gt;).&lt;/p&gt;&#xA;&lt;p&gt;Por ejemplo, podemos usar &lt;code&gt;cat $filename | grep &#39;hello&#39;&lt;/code&gt; para filtrar el contenido del fichero &lt;code&gt;$filename&lt;/code&gt; y quedarnos únicamente con las líneas que contengan &lt;code&gt;hello&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;¿Cómo podemos conseguir lo mismo en nuestras scripts en Bash?&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
