<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Curl on On The Dock</title>
    <link>https://onthedock.github.io/tags/curl/</link>
    <description>Recent content in Curl on On The Dock</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>Handmade with &amp;#9829; by Xavi Aznar</copyright>
    <lastBuildDate>Fri, 17 Jun 2022 20:46:13 +0200</lastBuildDate>
    <atom:link href="https://onthedock.github.io/tags/curl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cliente API en Bash (con curl)</title>
      <link>https://onthedock.github.io/post/220617-cliente-api-en-bash/</link>
      <pubDate>Fri, 17 Jun 2022 20:46:13 +0200</pubDate>
      <guid>https://onthedock.github.io/post/220617-cliente-api-en-bash/</guid>
      <description>&lt;p&gt;En una entrada anterior, &lt;a href=&#34;https://onthedock.github.io/post/220518-obtener-respuesta-y-http-status-con-curl/&#34;&gt;Obtener respuesta y código de la petición HTTP con curl&lt;/a&gt;, explicaba cómo mejorar, en mi opinión, la &lt;em&gt;relación&lt;/em&gt; con la API desde los &lt;em&gt;scripts&lt;/em&gt; (en Bash) que se ejecutan desde una &lt;em&gt;pipeline&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;La idea que explicaba en el artículo era cómo usar el código HTTP devuelto por la función que expone la API para controlar posibles errores.&lt;/p&gt;&#xA;&lt;p&gt;Como prueba de concepto fue satisfactoria, pero no resulta práctica aplicarla; en un caso real se usan múltiples documentos y la repetición del mismo código una y otra vez hace que se alcance el límite de cuatro mil caracteres en un &lt;em&gt;paso&lt;/em&gt; de la &lt;em&gt;pipeline&lt;/em&gt;&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;Así que la solución es &lt;em&gt;encapsular&lt;/em&gt; esta idea en una función en vez de repetir el mismo código una y otra vez: &lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34;&gt;Don&amp;rsquo;t repeat yourself&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Obtener respuesta y código de la petición HTTP con curl</title>
      <link>https://onthedock.github.io/post/220518-obtener-respuesta-y-http-status-con-curl/</link>
      <pubDate>Wed, 18 May 2022 18:30:52 +0200</pubDate>
      <guid>https://onthedock.github.io/post/220518-obtener-respuesta-y-http-status-con-curl/</guid>
      <description>&lt;p&gt;Llevo una temporada revisando código -MUCHO, MUCHO código- en Bash.&lt;/p&gt;&#xA;&lt;p&gt;Como parte de uno de los &lt;em&gt;steps&lt;/em&gt; de ejecución de una &lt;em&gt;pipeline&lt;/em&gt;, se consulta una API para obtener o actualizar información de una base de datos y &lt;em&gt;hacer cosas&lt;/em&gt; con esa información, como desplegar recursos en un proveedor cloud (usando la &lt;em&gt;cli&lt;/em&gt;) o lanzando Terraform.&lt;/p&gt;&#xA;&lt;p&gt;Uno de los patrones que me encontrado a la hora de interaccionar con la API es el siguiente:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Generar el &lt;em&gt;payload&lt;/em&gt; en JSON y guardarlo en una variable.&lt;/li&gt;&#xA;&lt;li&gt;Ejecutar la petición usando &lt;code&gt;curl&lt;/code&gt; y guardar la respuesta en un fichero.&lt;/li&gt;&#xA;&lt;li&gt;Filtrar la respuesta usando &lt;code&gt;jq&lt;/code&gt; leyendo el fichero.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Configura curl para usar un proxy</title>
      <link>https://onthedock.github.io/post/170111-configura-curl-para-usar-proxy/</link>
      <pubDate>Wed, 11 Jan 2017 08:22:56 +0100</pubDate>
      <guid>https://onthedock.github.io/post/170111-configura-curl-para-usar-proxy/</guid>
      <description>&lt;p&gt;Cómo configurar &lt;code&gt;curl&lt;/code&gt; para salir a internet a través de un &lt;em&gt;proxy&lt;/em&gt; que requiere autenticación.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
