<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on On The Dock</title>
    <link>https://onthedock.github.io/tags/go/</link>
    <description>Recent content in go on On The Dock</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Handmade with &amp;#9829; by Xavi Aznar</copyright>
    <lastBuildDate>Sun, 26 Feb 2023 12:11:54 +0100</lastBuildDate><atom:link href="https://onthedock.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CSV Parser (II)</title>
      <link>https://onthedock.github.io/post/230226-proxy-rules-csv-parser/</link>
      <pubDate>Sun, 26 Feb 2023 12:11:54 +0100</pubDate>
      
      <guid>https://onthedock.github.io/post/230226-proxy-rules-csv-parser/</guid>
      <description>&lt;p&gt;Hace unas semanas comentaba que estaba trabajando en un proyecto personal para implementar un &lt;em&gt;parseador&lt;/em&gt; de reglas para el &lt;em&gt;proxy&lt;/em&gt;, en Go.&lt;/p&gt;
&lt;p&gt;Despu√©s de leer los art√≠culos &lt;a href=&#34;https://bitfieldconsulting.com/golang/packages&#34;&gt;Write packages, not programs&lt;/a&gt; y &lt;a href=&#34;https://bitfieldconsulting.com/golang/commands&#34;&gt;From packages to commands&lt;/a&gt; de John Arundel (as√≠ como los art√≠culos a los que enlaza), decid√≠ enfocar de manera diferente el &lt;em&gt;parseador&lt;/em&gt; de reglas del proxy.&lt;/p&gt;
&lt;p&gt;Empec√© a escribir un nuevo m√≥dulo &lt;code&gt;rules&lt;/code&gt; guiado por tests&amp;hellip;&lt;/p&gt;
&lt;p&gt;El resultado se encuentra disponible en &lt;a href=&#34;https://github.com/onthedock/proxy-rules&#34;&gt;ontehdock/proxy-rules&lt;/a&gt; en Github, pero aqu√≠ apunto algunas pinceladas (a modo de notas personales).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CSV Parser en Go (work in progress)</title>
      <link>https://onthedock.github.io/post/230201-csv-parser-en-go/</link>
      <pubDate>Wed, 01 Feb 2023 20:08:55 +0100</pubDate>
      
      <guid>https://onthedock.github.io/post/230201-csv-parser-en-go/</guid>
      <description>&lt;p&gt;En la entrada &lt;a href=&#34;https://onthedock.github.io/post/230111-convertir-csv-en-json/&#34;&gt;Convertir CSV en JSON con Jq&lt;/a&gt; comentaba c√≥mo realizar la conversi√≥n de un fichero CSV en JSON usando Jq.&lt;/p&gt;
&lt;p&gt;En esta entrada repito (parcialmente) el ejercicio, pero usando Go.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Prohibido anidar c√≥digo o por qu√© debes evitar usar cl√°usulas &#39;else&#39; en los condicionales</title>
      <link>https://onthedock.github.io/post/221210-prohibido-anidar-codigo/</link>
      <pubDate>Sat, 10 Dec 2022 17:17:41 +0100</pubDate>
      
      <guid>https://onthedock.github.io/post/221210-prohibido-anidar-codigo/</guid>
      <description>&lt;p&gt;Hace unos d√≠as me top√© con el v√≠deo &lt;a href=&#34;https://www.youtube.com/watch?v=CFRhGnuXG-4&#34;&gt;Why You Shouldn&amp;rsquo;t Nest Your Code&lt;/a&gt; del canal &lt;strong&gt;CodeAesthetic&lt;/strong&gt; de YouTube. Me record√≥ en cierto modo al art√≠culo de Mat Ryer &lt;a href=&#34;https://medium.com/@matryer/line-of-sight-in-code-186dd7cdea88&#34;&gt;Code: Align the happy path to the left edge&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aprovechando la calma de estos d√≠as, he revisado algo del c√≥digo que tenemos en algunas de nuestras &lt;em&gt;pipelines&lt;/em&gt;. He aplicado las ideas explicadas en estos art√≠culos y el incremento en la claridad del c√≥digo ha sido &lt;strong&gt;espectacular&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cliente en Go para la CMDB Updater Tool API</title>
      <link>https://onthedock.github.io/post/221126-cliente-en-go/</link>
      <pubDate>Sat, 26 Nov 2022 12:39:31 +0100</pubDate>
      
      <guid>https://onthedock.github.io/post/221126-cliente-en-go/</guid>
      <description>&lt;p&gt;En entradas anteriores he escrito sobre c√≥mo interaccionar con una API a trav√©s de &lt;em&gt;scripts&lt;/em&gt; en Bash, usando &lt;code&gt;curl&lt;/code&gt; y poco m√°s&amp;hellip; En vez de dejar en manos de los usuarios la tarea de generar el &lt;em&gt;payload&lt;/em&gt; que enviar v√≠a &lt;code&gt;curl&lt;/code&gt; a la API, desarroll√© un cliente en Bash: &lt;a href=&#34;https://onthedock.github.io/post/220617-cliente-api-en-bash/&#34;&gt;Cliente API en Bash (con curl)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Desde entonces, he estado trabajando en una versi√≥n en Go del cliente para √©sta API&amp;hellip; Y creo que ¬°ya est√° lista üéâ!&lt;/p&gt;
&lt;p&gt;En esta entrada, describo por encima c√≥mo funciona, pero sobre todo c√≥mo ha sido la experiencia de desarrollarla.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go-queue: Un ejercicio en Go</title>
      <link>https://onthedock.github.io/post/220829-go-queue-un-ejercicio-en-go/</link>
      <pubDate>Mon, 29 Aug 2022 20:05:33 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/220829-go-queue-un-ejercicio-en-go/</guid>
      <description>&lt;p&gt;Hace unos d√≠as le√≠a en el foro de Kubernetes el caso de un usuario que no ten√≠a claro c√≥mo hacer que su aplicaci√≥n fuera escalable, ya que al llegar a un determinado nivel de carga, la aplicaci√≥n se saturaba.&lt;/p&gt;
&lt;p&gt;El problema, por lo que entend√≠, es que la aplicaci√≥n hac√≠a &amp;ldquo;todo el trabajo&amp;rdquo;: recib√≠a las peticiones de los usuarios, gestionaba las acciones para procesar cada petici√≥n y devolv√≠a el resultado a los usuarios una vez finalizado.&lt;/p&gt;
&lt;p&gt;Una soluci√≥n r√°pida podr√≠a ser desplegar un &lt;a href=&#34;https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/&#34;&gt;&lt;em&gt;horizontal pod autoscaler&lt;/em&gt;&lt;/a&gt;, pero probablemente lo ideal ser√≠a cambiar la arquitectura de la aplicaci√≥n&amp;hellip;&lt;/p&gt;
&lt;p&gt;As√≠ que me puse a ello en mi lenguaje de programaci√≥n favorito: Go ;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mejora al tutorial &#39;Building a Web App with Go and SQLite&#39;: devolver el Id del nuevo registro</title>
      <link>https://onthedock.github.io/post/220812-mejora-al-tutorial-devolver-id-de-nuevo-registro/</link>
      <pubDate>Fri, 12 Aug 2022 14:17:44 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/220812-mejora-al-tutorial-devolver-id-de-nuevo-registro/</guid>
      <description>&lt;p&gt;Habitualmente, al insertar un valor en el &lt;em&gt;backend&lt;/em&gt; a trav√©s de la API, si la operaci√≥n tiene √©xito, se devuelve el identificador del registro creado.&lt;/p&gt;
&lt;p&gt;En el tutorial de Jeremy Morgan &lt;a href=&#34;https://www.allhandsontech.com/programming/golang/web-app-sqlite-go/&#34;&gt;Building a Web App with Go and SQLite&lt;/a&gt;, se devuelve un mensaje gen√©rico &lt;code&gt;{&amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;}&lt;/code&gt;, que no permite realizar acciones adicionales sobre el nuevo registro.&lt;/p&gt;
&lt;p&gt;En esta entrada modificamos el c√≥digo de la funci√≥n &lt;code&gt;AddPerson&lt;/code&gt; para devolver el identificador del nuevo registro.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title> Mejora al tutorial &#39;Building a Web App with Go and SQLite&#39;: Devolver los registros posteriores al especificado</title>
      <link>https://onthedock.github.io/post/220812-mejora-al-tutorial-devolver-los-registros-posteriores-al-especificado/</link>
      <pubDate>Fri, 12 Aug 2022 12:00:52 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/220812-mejora-al-tutorial-devolver-los-registros-posteriores-al-especificado/</guid>
      <description>&lt;p&gt;En la entrada &lt;a href=&#34;%20ref%20%22220812-mejora-al-tutorial-limitar-el-numero-de-registros-devueltos-por-defecto.md%22&#34;&gt;Mejora al tutorial &amp;lsquo;Building a Web App with Go and SQLite&amp;rsquo;: limitar el n√∫mero de registros devueltos por defecto&lt;/a&gt; modificamos el c√≥digo original del tutorial de Jeremy Morgan &lt;a href=&#34;https://www.allhandsontech.com/programming/golang/web-app-sqlite-go/&#34;&gt;Building a Web App with Go and SQLite&lt;/a&gt; para que el usuario pudiera especificar el n√∫mero de resultados devueltos al consultar la API a trav√©s del par√°metro &lt;code&gt;count&lt;/code&gt;: &lt;code&gt;http://&amp;lt;URL&amp;gt;/api/v1/person?count=15&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;El problema es que siempre se devuelven las entradas empezando por la de Id m√°s bajo (habitualmente, &lt;code&gt;1&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;En esta entrada, modificamos la funci√≥n &lt;code&gt;getPersonById&lt;/code&gt; para introducir tambi√©n el par√°metro &lt;code&gt;count&lt;/code&gt; y que se devuelvan &lt;code&gt;count&lt;/code&gt; resultados &lt;strong&gt;a partir del Id especificado&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mejora al tutorial &#39;Building a Web App with Go and SQLite&#39;: limitar el n√∫mero de registros devueltos por defecto</title>
      <link>https://onthedock.github.io/post/220812-mejora-al-tutorial-limitar-el-numero-de-registros-devueltos-por-defecto/</link>
      <pubDate>Fri, 12 Aug 2022 08:05:44 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/220812-mejora-al-tutorial-limitar-el-numero-de-registros-devueltos-por-defecto/</guid>
      <description>&lt;p&gt;En la mayor√≠a de tutoriales sobre c√≥mo construir una API en Go (inclu√≠do el &lt;a href=&#34;https://go.dev/doc/tutorial/web-service-gin#all_items&#34;&gt;tutorial&lt;/a&gt; de la documentaci√≥n oficial de Go), el primer &lt;em&gt;endpoint&lt;/em&gt; que se describe es el que usa el m√©todo &lt;code&gt;GET&lt;/code&gt; y que recupera &lt;strong&gt;todos&lt;/strong&gt; los registros de la base de datos.&lt;/p&gt;
&lt;p&gt;Sin embargo, en el mundo real, las APIs devuelven un n√∫mero limitado de registros y un &lt;em&gt;√≠ndice&lt;/em&gt;; en una nueva consulta, se puede obtener un nuevo conjunto de resultados  (y un nuevo √≠ndice), etc. Esto es as√≠ porque el resultado de la consulta con &lt;code&gt;GET&lt;/code&gt; puede, potencialmente, devolver un n√∫mero elevado de registros.&lt;/p&gt;
&lt;p&gt;En el tutorial &lt;a href=&#34;https://www.allhandsontech.com/programming/golang/web-app-sqlite-go/&#34;&gt;Building a Web App with Go and SQLite&lt;/a&gt;, se incluye una limitaci√≥n &lt;em&gt;hardcodeada&lt;/em&gt; en el c√≥digo para evitar, precisamente, que se devuelvan todos los valores en la base de datos de ejemplo (1000 registros).&lt;/p&gt;
&lt;p&gt;En este art√≠culo, voy a mostrar c√≥mo obtener el valor desde la &lt;em&gt;queryString&lt;/em&gt; para que sea configurable desde la llamada a la API.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Uso del paquete &#39;flag&#39; en Go</title>
      <link>https://onthedock.github.io/post/220723-uso-del-paquete-flag-en-go/</link>
      <pubDate>Sat, 23 Jul 2022 16:08:13 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/220723-uso-del-paquete-flag-en-go/</guid>
      <description>&lt;p&gt;Una de puntos que siempre se destacan al trabajar con Go es lo completa que es la biblioteca est√°ndar de funciones que proporciona el propio lenguaje.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/flag&#34;&gt;&lt;code&gt;flag&lt;/code&gt;&lt;/a&gt; proporciona funcionalidad para gestionar las opciones de las aplicaciones sin interfaz gr√°fica que se ejecutan desde la &lt;em&gt;l√≠nea de comandos&lt;/em&gt; (CLI).&lt;/p&gt;
&lt;p&gt;En esta entrada reviso c√≥mo usar el paquete para los casos de uso m√°s habituales.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Programando en Go: Aplicaci√≥n de Lista de la compra</title>
      <link>https://onthedock.github.io/post/220130-programando-una-aplicacion-de-lista-de-la-compra/</link>
      <pubDate>Sun, 30 Jan 2022 20:51:49 +0100</pubDate>
      
      <guid>https://onthedock.github.io/post/220130-programando-una-aplicacion-de-lista-de-la-compra/</guid>
      <description>&lt;p&gt;Como coment√© hacia el final de la entrada anterior &lt;a href=&#34;https://onthedock.github.io/post/220129-aprendiendo-a-programar-en-go-pasito-a-pasito/&#34;&gt;Aprendiendo a programar en Go&amp;hellip; pasito a pasito&lt;/a&gt;, teniendo la seguridad de los tests me ha dado la confianza de empezar a desarrollar una aplicaci√≥n a modo de &lt;em&gt;ejercicio de aprendizaje&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El objetivo de la aplicaci√≥n es el de gestionar una &lt;em&gt;lista de la compra&lt;/em&gt;, aunque esto es s√≥lo una excusa ;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Aprendiendo a programar en Go... pasito a pasito</title>
      <link>https://onthedock.github.io/post/220129-aprendiendo-a-programar-en-go-pasito-a-pasito/</link>
      <pubDate>Sat, 29 Jan 2022 09:56:58 +0100</pubDate>
      
      <guid>https://onthedock.github.io/post/220129-aprendiendo-a-programar-en-go-pasito-a-pasito/</guid>
      <description>&lt;p&gt;El &lt;em&gt;gophercise&lt;/em&gt; para crear una versi√≥n en Go de los libros de &lt;em&gt;Elige tu propia aventura&lt;/em&gt; de la &lt;a href=&#34;https://onthedock.github.io/post/220105-cyoa-gophercicio-3/&#34;&gt;entrada anterior&lt;/a&gt; me hizo ver que debo asentar los conocimientos b√°sicos sobre Go.&lt;/p&gt;
&lt;p&gt;No me refieron tanto a saber qu√© es una variable, la sintaxis de un bucle &lt;code&gt;for&lt;/code&gt; ni nada por el estilo; me refiero a la forma en la que &lt;em&gt;debe&lt;/em&gt; programarse en Go&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Elige tu propia aventura (Ejercicios en Go) #gophercises (teaser)</title>
      <link>https://onthedock.github.io/post/220105-cyoa-gophercicio-3/</link>
      <pubDate>Wed, 05 Jan 2022 11:31:21 +0100</pubDate>
      
      <guid>https://onthedock.github.io/post/220105-cyoa-gophercicio-3/</guid>
      <description>&lt;p&gt;Ayer dediqu√© una buena parte del d√≠a al tercer ejercicio de &lt;a href=&#34;https://gophercises.com/&#34;&gt;Gophercises&lt;/a&gt; (puedes ver el v√≠deo de Jon en YouTube: &lt;a href=&#34;https://www.youtube.com/watch?v=DPCGXJLFlPU&#34;&gt;Gophercises #3 - Choose Your Own Adventure Book (via website)&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Estuve tomando notas sobre el v√≠deo de soluci√≥n de Jon al ejercicio, pausando el v√≠deo, reflexionando en c√≥mo atacaba cada parte del problema, etc&amp;hellip;&lt;/p&gt;
&lt;p&gt;Hoy he vuelto a revisar las notas con la intenci√≥n de publicarlas, como hice con el ejercicio anterior (&lt;a href=&#34;https://onthedock.github.io/post/211212-gophercicio-1-the-quiz-parte-1/&#34;&gt;Quiz Game, 1a parte&lt;/a&gt; y &lt;a href=&#34;https://onthedock.github.io/post/211212-gophercicio-1-the-quiz-parte-2/&#34;&gt;Quiz Game, 2a parte&lt;/a&gt;). Sin embargo, quiero aprovechar el &lt;em&gt;flow&lt;/em&gt; (y el tiempo libre) para repasar con calma la documentaci√≥n de los diferentes paquetes usados en el ejercicio, revisar el tema de los &lt;em&gt;constructores&lt;/em&gt; y otros aspectos m√°s te√≥ricos que Jon usa con total naturalidad y que a m√≠ me resultan completamente marcianos&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quiz Game, 2a parte (Ejercicios en Go) #gophercises</title>
      <link>https://onthedock.github.io/post/211212-gophercicio-1-the-quiz-parte-2/</link>
      <pubDate>Sun, 12 Dec 2021 11:18:48 +0100</pubDate>
      
      <guid>https://onthedock.github.io/post/211212-gophercicio-1-the-quiz-parte-2/</guid>
      <description>&lt;p&gt;Seguimos con la segunda parte del &lt;em&gt;gophercicio&lt;/em&gt; &amp;ldquo;&lt;strong&gt;quiz game&lt;/strong&gt;&amp;rdquo;, propuesto por Jon Calhoun.&lt;/p&gt;
&lt;p&gt;El ejercicio consiste en realizar una serie de preguntas al usuario (cargadas desde un fichero CSV) y presentarlas al usuario, registrando las respuestas acertadas y mostrando la puntuaci√≥n al final. Esta parte del ejecicio est√° resuelta en la entrada &lt;a href=&#34;https://onthedock.github.io/post/211212-gophercicio-1-the-quiz-parte-1/&#34;&gt;Quiz Game, 1a parte (Ejercicios en Go) #gophercises&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En esta segunda parte, a√±adiremos un l√≠mite de tiempo (configurable por el usuario) en el que completar la prueba (o el m√°ximo n√∫mero de respuestas posibles).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quiz Game, 1a parte (Ejercicios en Go) #gophercises</title>
      <link>https://onthedock.github.io/post/211212-gophercicio-1-the-quiz-parte-1/</link>
      <pubDate>Sun, 12 Dec 2021 09:59:29 +0100</pubDate>
      
      <guid>https://onthedock.github.io/post/211212-gophercicio-1-the-quiz-parte-1/</guid>
      <description>&lt;p&gt;El primer ejercicio consiste en crear un programa que haga un &amp;ldquo;examen&amp;rdquo; o prueba de conocimientos al usuario.&lt;/p&gt;
&lt;p&gt;El programa debe cargar las preguntas y respuestas de un fichero CSV, presentarlas al usuario y mostrar la puntuaci√≥n de preguntas respondidas correctamente sobre el total al finalizar la prueba.&lt;/p&gt;
&lt;p&gt;En la segunda parte, adem√°s, estableceremos un l√≠mite de tiempo.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shifting Left - Aprendiendo a programar en Go</title>
      <link>https://onthedock.github.io/post/211211-shifting-left/</link>
      <pubDate>Sat, 11 Dec 2021 21:10:44 +0100</pubDate>
      
      <guid>https://onthedock.github.io/post/211211-shifting-left/</guid>
      <description>&lt;p&gt;Dentro del &lt;em&gt;mundillo&lt;/em&gt; de DevOps, cada vez m√°s y m√°s cosas se definen &amp;ldquo;&lt;strong&gt;como c√≥digo&lt;/strong&gt;&amp;rdquo;; &lt;em&gt;infraestructura como c√≥digo&lt;/em&gt;, &lt;em&gt;configuraci√≥n como c√≥digo&lt;/em&gt;, &lt;em&gt;seguridad como c√≥digo&lt;/em&gt;, etc&amp;hellip;&lt;/p&gt;
&lt;p&gt;Mi interpretaci√≥n de esta &amp;ldquo;filosof√≠a&amp;rdquo; de &amp;ldquo;&lt;em&gt;* como c√≥digo&lt;/em&gt;&amp;rdquo;, no s√≥lo se refiere a la &lt;strong&gt;definici√≥n&lt;/strong&gt; de la infraestructura, seguridad, etc, sino tambi√©n a la aplicaci√≥n las mismas herramientas y metodolog√≠as que se usan para el c√≥digo &lt;strong&gt;c√≥digo&lt;/strong&gt;: repositorios de control de versiones, &lt;em&gt;testing&lt;/em&gt;, integraci√≥n continua, etc.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
