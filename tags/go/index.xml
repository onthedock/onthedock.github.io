<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on On The Dock</title>
    <link>https://onthedock.github.io/tags/go/</link>
    <description>Recent content in go on On The Dock</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Handmade with &amp;#9829; by Xavi Aznar</copyright>
    <lastBuildDate>Fri, 12 Aug 2022 14:17:44 +0200</lastBuildDate><atom:link href="https://onthedock.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mejora al tutorial &#39;Building a Web App with Go and SQLite&#39;: devolver el Id del nuevo registro</title>
      <link>https://onthedock.github.io/post/220812-mejora-al-tutorial-devolver-id-de-nuevo-registro/</link>
      <pubDate>Fri, 12 Aug 2022 14:17:44 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/220812-mejora-al-tutorial-devolver-id-de-nuevo-registro/</guid>
      <description>&lt;p&gt;Habitualmente, al insertar un valor en el &lt;em&gt;backend&lt;/em&gt; a través de la API, si la operación tiene éxito, se devuelve el identificador del registro creado.&lt;/p&gt;
&lt;p&gt;En el tutorial de Jeremy Morgan &lt;a href=&#34;https://www.allhandsontech.com/programming/golang/web-app-sqlite-go/&#34;&gt;Building a Web App with Go and SQLite&lt;/a&gt;, se devuelve un mensaje genérico &lt;code&gt;{&amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;}&lt;/code&gt;, que no permite realizar acciones adicionales sobre el nuevo registro.&lt;/p&gt;
&lt;p&gt;En esta entrada modificamos el código de la función &lt;code&gt;AddPerson&lt;/code&gt; para devolver el identificador del nuevo registro.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title> Mejora al tutorial &#39;Building a Web App with Go and SQLite&#39;: Devolver los registros posteriores al especificado</title>
      <link>https://onthedock.github.io/post/220812-mejora-al-tutorial-devolver-los-registros-posteriores-al-especificado/</link>
      <pubDate>Fri, 12 Aug 2022 12:00:52 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/220812-mejora-al-tutorial-devolver-los-registros-posteriores-al-especificado/</guid>
      <description>&lt;p&gt;En la entrada &lt;a href=&#34;%20ref%20%22220812-mejora-al-tutorial-limitar-el-numero-de-registros-devueltos-por-defecto.md%22&#34;&gt;Mejora al tutorial &amp;lsquo;Building a Web App with Go and SQLite&amp;rsquo;: limitar el número de registros devueltos por defecto&lt;/a&gt; modificamos el código original del tutorial de Jeremy Morgan &lt;a href=&#34;https://www.allhandsontech.com/programming/golang/web-app-sqlite-go/&#34;&gt;Building a Web App with Go and SQLite&lt;/a&gt; para que el usuario pudiera especificar el número de resultados devueltos al consultar la API a través del parámetro &lt;code&gt;count&lt;/code&gt;: &lt;code&gt;http://&amp;lt;URL&amp;gt;/api/v1/person?count=15&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;El problema es que siempre se devuelven las entradas empezando por la de Id más bajo (habitualmente, &lt;code&gt;1&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;En esta entrada, modificamos la función &lt;code&gt;getPersonById&lt;/code&gt; para introducir también el parámetro &lt;code&gt;count&lt;/code&gt; y que se devuelvan &lt;code&gt;count&lt;/code&gt; resultados &lt;strong&gt;a partir del Id especificado&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mejora al tutorial &#39;Building a Web App with Go and SQLite&#39;: limitar el número de registros devueltos por defecto</title>
      <link>https://onthedock.github.io/post/220812-mejora-al-tutorial-limitar-el-numero-de-registros-devueltos-por-defecto/</link>
      <pubDate>Fri, 12 Aug 2022 08:05:44 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/220812-mejora-al-tutorial-limitar-el-numero-de-registros-devueltos-por-defecto/</guid>
      <description>&lt;p&gt;En la mayoría de tutoriales sobre cómo construir una API en Go (incluído el &lt;a href=&#34;https://go.dev/doc/tutorial/web-service-gin#all_items&#34;&gt;tutorial&lt;/a&gt; de la documentación oficial de Go), el primer &lt;em&gt;endpoint&lt;/em&gt; que se describe es el que usa el método &lt;code&gt;GET&lt;/code&gt; y que recupera &lt;strong&gt;todos&lt;/strong&gt; los registros de la base de datos.&lt;/p&gt;
&lt;p&gt;Sin embargo, en el mundo real, las APIs devuelven un número limitado de registros y un &lt;em&gt;índice&lt;/em&gt;; en una nueva consulta, se puede obtener un nuevo conjunto de resultados  (y un nuevo índice), etc. Esto es así porque el resultado de la consulta con &lt;code&gt;GET&lt;/code&gt; puede, potencialmente, devolver un número elevado de registros.&lt;/p&gt;
&lt;p&gt;En el tutorial &lt;a href=&#34;https://www.allhandsontech.com/programming/golang/web-app-sqlite-go/&#34;&gt;Building a Web App with Go and SQLite&lt;/a&gt;, se incluye una limitación &lt;em&gt;hardcodeada&lt;/em&gt; en el código para evitar, precisamente, que se devuelvan todos los valores en la base de datos de ejemplo (1000 registros).&lt;/p&gt;
&lt;p&gt;En este artículo, voy a mostrar cómo obtener el valor desde la &lt;em&gt;queryString&lt;/em&gt; para que sea configurable desde la llamada a la API.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Uso del paquete &#39;flag&#39; en Go</title>
      <link>https://onthedock.github.io/post/220723-uso-del-paquete-flag-en-go/</link>
      <pubDate>Sat, 23 Jul 2022 16:08:13 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/220723-uso-del-paquete-flag-en-go/</guid>
      <description>&lt;p&gt;Una de puntos que siempre se destacan al trabajar con Go es lo completa que es la biblioteca estándar de funciones que proporciona el propio lenguaje.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/flag&#34;&gt;&lt;code&gt;flag&lt;/code&gt;&lt;/a&gt; proporciona funcionalidad para gestionar las opciones de las aplicaciones sin interfaz gráfica que se ejecutan desde la &lt;em&gt;línea de comandos&lt;/em&gt; (CLI).&lt;/p&gt;
&lt;p&gt;En esta entrada reviso cómo usar el paquete para los casos de uso más habituales.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Programando en Go: Aplicación de Lista de la compra</title>
      <link>https://onthedock.github.io/post/220130-programando-una-aplicacion-de-lista-de-la-compra/</link>
      <pubDate>Sun, 30 Jan 2022 20:51:49 +0100</pubDate>
      
      <guid>https://onthedock.github.io/post/220130-programando-una-aplicacion-de-lista-de-la-compra/</guid>
      <description>&lt;p&gt;Como comenté hacia el final de la entrada anterior &lt;a href=&#34;https://onthedock.github.io/post/220129-aprendiendo-a-programar-en-go-pasito-a-pasito/&#34;&gt;Aprendiendo a programar en Go&amp;hellip; pasito a pasito&lt;/a&gt;, teniendo la seguridad de los tests me ha dado la confianza de empezar a desarrollar una aplicación a modo de &lt;em&gt;ejercicio de aprendizaje&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El objetivo de la aplicación es el de gestionar una &lt;em&gt;lista de la compra&lt;/em&gt;, aunque esto es sólo una excusa ;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Aprendiendo a programar en Go... pasito a pasito</title>
      <link>https://onthedock.github.io/post/220129-aprendiendo-a-programar-en-go-pasito-a-pasito/</link>
      <pubDate>Sat, 29 Jan 2022 09:56:58 +0100</pubDate>
      
      <guid>https://onthedock.github.io/post/220129-aprendiendo-a-programar-en-go-pasito-a-pasito/</guid>
      <description>&lt;p&gt;El &lt;em&gt;gophercise&lt;/em&gt; para crear una versión en Go de los libros de &lt;em&gt;Elige tu propia aventura&lt;/em&gt; de la &lt;a href=&#34;https://onthedock.github.io/post/220105-cyoa-gophercicio-3/&#34;&gt;entrada anterior&lt;/a&gt; me hizo ver que debo asentar los conocimientos básicos sobre Go.&lt;/p&gt;
&lt;p&gt;No me refieron tanto a saber qué es una variable, la sintaxis de un bucle &lt;code&gt;for&lt;/code&gt; ni nada por el estilo; me refiero a la forma en la que &lt;em&gt;debe&lt;/em&gt; programarse en Go&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Elige tu propia aventura (Ejercicios en Go) #gophercises (teaser)</title>
      <link>https://onthedock.github.io/post/220105-cyoa-gophercicio-3/</link>
      <pubDate>Wed, 05 Jan 2022 11:31:21 +0100</pubDate>
      
      <guid>https://onthedock.github.io/post/220105-cyoa-gophercicio-3/</guid>
      <description>&lt;p&gt;Ayer dediqué una buena parte del día al tercer ejercicio de &lt;a href=&#34;https://gophercises.com/&#34;&gt;Gophercises&lt;/a&gt; (puedes ver el vídeo de Jon en YouTube: &lt;a href=&#34;https://www.youtube.com/watch?v=DPCGXJLFlPU&#34;&gt;Gophercises #3 - Choose Your Own Adventure Book (via website)&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Estuve tomando notas sobre el vídeo de solución de Jon al ejercicio, pausando el vídeo, reflexionando en cómo atacaba cada parte del problema, etc&amp;hellip;&lt;/p&gt;
&lt;p&gt;Hoy he vuelto a revisar las notas con la intención de publicarlas, como hice con el ejercicio anterior (&lt;a href=&#34;https://onthedock.github.io/post/211212-gophercicio-1-the-quiz-parte-1/&#34;&gt;Quiz Game, 1a parte&lt;/a&gt; y &lt;a href=&#34;https://onthedock.github.io/post/211212-gophercicio-1-the-quiz-parte-2/&#34;&gt;Quiz Game, 2a parte&lt;/a&gt;). Sin embargo, quiero aprovechar el &lt;em&gt;flow&lt;/em&gt; (y el tiempo libre) para repasar con calma la documentación de los diferentes paquetes usados en el ejercicio, revisar el tema de los &lt;em&gt;constructores&lt;/em&gt; y otros aspectos más teóricos que Jon usa con total naturalidad y que a mí me resultan completamente marcianos&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quiz Game, 2a parte (Ejercicios en Go) #gophercises</title>
      <link>https://onthedock.github.io/post/211212-gophercicio-1-the-quiz-parte-2/</link>
      <pubDate>Sun, 12 Dec 2021 11:18:48 +0100</pubDate>
      
      <guid>https://onthedock.github.io/post/211212-gophercicio-1-the-quiz-parte-2/</guid>
      <description>&lt;p&gt;Seguimos con la segunda parte del &lt;em&gt;gophercicio&lt;/em&gt; &amp;ldquo;&lt;strong&gt;quiz game&lt;/strong&gt;&amp;rdquo;, propuesto por Jon Calhoun.&lt;/p&gt;
&lt;p&gt;El ejercicio consiste en realizar una serie de preguntas al usuario (cargadas desde un fichero CSV) y presentarlas al usuario, registrando las respuestas acertadas y mostrando la puntuación al final. Esta parte del ejecicio está resuelta en la entrada &lt;a href=&#34;https://onthedock.github.io/post/211212-gophercicio-1-the-quiz-parte-1/&#34;&gt;Quiz Game, 1a parte (Ejercicios en Go) #gophercises&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En esta segunda parte, añadiremos un límite de tiempo (configurable por el usuario) en el que completar la prueba (o el máximo número de respuestas posibles).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quiz Game, 1a parte (Ejercicios en Go) #gophercises</title>
      <link>https://onthedock.github.io/post/211212-gophercicio-1-the-quiz-parte-1/</link>
      <pubDate>Sun, 12 Dec 2021 09:59:29 +0100</pubDate>
      
      <guid>https://onthedock.github.io/post/211212-gophercicio-1-the-quiz-parte-1/</guid>
      <description>&lt;p&gt;El primer ejercicio consiste en crear un programa que haga un &amp;ldquo;examen&amp;rdquo; o prueba de conocimientos al usuario.&lt;/p&gt;
&lt;p&gt;El programa debe cargar las preguntas y respuestas de un fichero CSV, presentarlas al usuario y mostrar la puntuación de preguntas respondidas correctamente sobre el total al finalizar la prueba.&lt;/p&gt;
&lt;p&gt;En la segunda parte, además, estableceremos un límite de tiempo.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shifting Left - Aprendiendo a programar en Go</title>
      <link>https://onthedock.github.io/post/211211-shifting-left/</link>
      <pubDate>Sat, 11 Dec 2021 21:10:44 +0100</pubDate>
      
      <guid>https://onthedock.github.io/post/211211-shifting-left/</guid>
      <description>&lt;p&gt;Dentro del &lt;em&gt;mundillo&lt;/em&gt; de DevOps, cada vez más y más cosas se definen &amp;ldquo;&lt;strong&gt;como código&lt;/strong&gt;&amp;rdquo;; &lt;em&gt;infraestructura como código&lt;/em&gt;, &lt;em&gt;configuración como código&lt;/em&gt;, &lt;em&gt;seguridad como código&lt;/em&gt;, etc&amp;hellip;&lt;/p&gt;
&lt;p&gt;Mi interpretación de esta &amp;ldquo;filosofía&amp;rdquo; de &amp;ldquo;&lt;em&gt;* como código&lt;/em&gt;&amp;rdquo;, no sólo se refiere a la &lt;strong&gt;definición&lt;/strong&gt; de la infraestructura, seguridad, etc, sino también a la aplicación las mismas herramientas y metodologías que se usan para el código &lt;strong&gt;código&lt;/strong&gt;: repositorios de control de versiones, &lt;em&gt;testing&lt;/em&gt;, integración continua, etc.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
