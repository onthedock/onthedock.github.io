<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubelinter on On The Dock</title>
    <link>https://onthedock.github.io/tags/kubelinter/</link>
    <description>Recent content in Kubelinter on On The Dock</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>Handmade with &amp;#9829; by Xavi Aznar</copyright>
    <lastBuildDate>Sun, 21 Feb 2021 12:08:02 +0100</lastBuildDate>
    <atom:link href="https://onthedock.github.io/tags/kubelinter/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Analiza los objetos de Kubernetes con Kubelinter y Cronjobs</title>
      <link>https://onthedock.github.io/post/210221-analiza-los-objetos-de-kubernetes-periodicamente-con-kubelinter-y-un-cronjob/</link>
      <pubDate>Sun, 21 Feb 2021 12:08:02 +0100</pubDate>
      <guid>https://onthedock.github.io/post/210221-analiza-los-objetos-de-kubernetes-periodicamente-con-kubelinter-y-un-cronjob/</guid>
      <description>&lt;p&gt;Idealmente, el análisis de los ficheros de definición de objetos (YAML) en Kubernetes debería realizarse &lt;strong&gt;antes&lt;/strong&gt; de crear los objetos en el clúster. Para ello, uno de los &lt;em&gt;stages&lt;/em&gt; del proceso de CI/CD debería incorporar KubeLinter (por ejemplo).&lt;/p&gt;&#xA;&lt;p&gt;De forma paralela, también deberíamos tener un proceso periódico que revise los ficheros de definición de los objetos que tenemos almacenados en el repositorio para identificar, por ejemplo, el uso de versiones de la API desaconsejadas (&lt;em&gt;deprecated&lt;/em&gt;) en proceso de eliminación de la API.&lt;/p&gt;&#xA;&lt;p&gt;En este artículo vemos cómo configurar un Cronjob que ejecute KubeLinter para obtener los ficheros de un repositorio remoto y analizarlos.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Seguridad en Kubernetes: runAsUser y readOnlyRootFilesystem</title>
      <link>https://onthedock.github.io/post/210212-runasuser-y-readonlyrootfilesystem/</link>
      <pubDate>Fri, 12 Feb 2021 23:02:05 +0100</pubDate>
      <guid>https://onthedock.github.io/post/210212-runasuser-y-readonlyrootfilesystem/</guid>
      <description>&lt;p&gt;En la entrada anterior &lt;a href=&#34;https://onthedock.github.io/post/210212-kubelinter/&#34;&gt;KubeLinter: identifica malas configuraciones en los objetos de Kubernetes&lt;/a&gt;, KubeLinter identificaba dos errores que se solucionan usando las opciones: &lt;code&gt;runAsUser&lt;/code&gt; y &lt;code&gt;readOnlyRootFilesystem&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;En esta entrada comparo los efectos de aplicar una u otra, así como qué pasa cuando se aplican las dos al mismo tiempo.&lt;/p&gt;</description>
    </item>
    <item>
      <title>KubeLinter: identifica malas configuraciones en los objetos de Kubernetes</title>
      <link>https://onthedock.github.io/post/210212-kubelinter/</link>
      <pubDate>Fri, 12 Feb 2021 21:36:01 +0100</pubDate>
      <guid>https://onthedock.github.io/post/210212-kubelinter/</guid>
      <description>&lt;p&gt;KubeLinter es un &lt;a href=&#34;https://es.wikipedia.org/wiki/Lint&#34;&gt;&lt;em&gt;linter&lt;/em&gt;&lt;/a&gt; para los objetos de Kubernetes; es decir, KubeLinter comprueba configuraciones &lt;em&gt;sospechosas&lt;/em&gt; en los ficheros de definición de los objetos de Kubernetes.&lt;/p&gt;&#xA;&lt;p&gt;En la documentación oficial tienes una lista de las validaciones que realiza y cuáles vienen habilitadas por defecto: &lt;a href=&#34;https://docs.kubelinter.io/#/generated/checks&#34;&gt;KubeLinter checks&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;KubeLinter es una herramienta &lt;em&gt;opensource&lt;/em&gt; desarrollada por StackRox, una empresa orientada a la seguridad que recientemente ha sido adquirida por Red Hat, precisamente, para mejorar la seguridad de OpenShift.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
