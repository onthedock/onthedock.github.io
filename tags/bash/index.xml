<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bash on On The Dock</title>
    <link>https://onthedock.github.io/tags/bash/</link>
    <description>Recent content in bash on On The Dock</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Handmade with &amp;#9829; by Xavi Aznar</copyright>
    <lastBuildDate>Fri, 17 Jun 2022 20:46:13 +0200</lastBuildDate><atom:link href="https://onthedock.github.io/tags/bash/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cliente API en Bash (con curl)</title>
      <link>https://onthedock.github.io/post/220617-cliente-api-en-bash/</link>
      <pubDate>Fri, 17 Jun 2022 20:46:13 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/220617-cliente-api-en-bash/</guid>
      <description>&lt;p&gt;En una entrada anterior, &lt;a href=&#34;https://onthedock.github.io/post/220518-obtener-respuesta-y-http-status-con-curl/&#34;&gt;Obtener respuesta y código de la petición HTTP con curl&lt;/a&gt;, explicaba cómo mejorar, en mi opinión, la &lt;em&gt;relación&lt;/em&gt; con la API desde los &lt;em&gt;scripts&lt;/em&gt; (en Bash) que se ejecutan desde una &lt;em&gt;pipeline&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;La idea que explicaba en el artículo era cómo usar el código HTTP devuelto por la función que expone la API para controlar posibles errores.&lt;/p&gt;
&lt;p&gt;Como prueba de concepto fue satisfactoria, pero no resulta práctica aplicarla; en un caso real se usan múltiples documentos y la repetición del mismo código una y otra vez hace que se alcance el límite de cuatro mil caracteres en un &lt;em&gt;paso&lt;/em&gt; de la &lt;em&gt;pipeline&lt;/em&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;Así que la solución es &lt;em&gt;encapsular&lt;/em&gt; esta idea en una función en vez de repetir el mismo código una y otra vez: &lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34;&gt;Don&amp;rsquo;t repeat yourself&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sacando partido de la funcionalidad de jq</title>
      <link>https://onthedock.github.io/post/220519-jq/</link>
      <pubDate>Thu, 19 May 2022 20:05:53 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/220519-jq/</guid>
      <description>&lt;p&gt;Siguendo con el &lt;a href=&#34;https://onthedock.github.io/post/220518-obtener-respuesta-y-http-status-con-curl/&#34;&gt;tema de ayer&lt;/a&gt;, hoy quiero revisar otro bloque de código.&lt;/p&gt;
&lt;p&gt;En este caso, se construye un &lt;em&gt;array&lt;/em&gt; en JSON usando Bash &lt;em&gt;puro&lt;/em&gt;, cuando es el proceso se simplifica &lt;strong&gt;enormemente&lt;/strong&gt; gracias a la función &lt;code&gt;--slurp&lt;/code&gt; de &lt;code&gt;jq&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Obtener respuesta y código de la petición HTTP con curl</title>
      <link>https://onthedock.github.io/post/220518-obtener-respuesta-y-http-status-con-curl/</link>
      <pubDate>Wed, 18 May 2022 18:30:52 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/220518-obtener-respuesta-y-http-status-con-curl/</guid>
      <description>&lt;p&gt;Llevo una temporada revisando código -MUCHO, MUCHO código- en Bash.&lt;/p&gt;
&lt;p&gt;Como parte de uno de los &lt;em&gt;steps&lt;/em&gt; de ejecución de una &lt;em&gt;pipeline&lt;/em&gt;, se consulta una API para obtener o actualizar información de una base de datos y &lt;em&gt;hacer cosas&lt;/em&gt; con esa información, como desplegar recursos en un proveedor cloud (usando la &lt;em&gt;cli&lt;/em&gt;) o lanzando Terraform.&lt;/p&gt;
&lt;p&gt;Uno de los patrones que me encontrado a la hora de interaccionar con la API es el siguiente:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generar el &lt;em&gt;payload&lt;/em&gt; en JSON y guardarlo en una variable.&lt;/li&gt;
&lt;li&gt;Ejecutar la petición usando &lt;code&gt;curl&lt;/code&gt; y guardar la respuesta en un fichero.&lt;/li&gt;
&lt;li&gt;Filtrar la respuesta usando &lt;code&gt;jq&lt;/code&gt; leyendo el fichero.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Sobre el uso de mayúsculas o minúsculas en los nombres de variables en Bash</title>
      <link>https://onthedock.github.io/post/220305-sobre-el-uso-de-mayusculas-o-minusculas-para-los-nombres-de-variables-en-bash/</link>
      <pubDate>Sat, 05 Mar 2022 11:30:49 +0100</pubDate>
      
      <guid>https://onthedock.github.io/post/220305-sobre-el-uso-de-mayusculas-o-minusculas-para-los-nombres-de-variables-en-bash/</guid>
      <description>&lt;p&gt;He estado buscando información sobre cuál es la manera correcta a la hora de definir los nombres de las variables en Bash&amp;hellip; Y como en el caso de la eterna batalla entre espacios vs tabs o Vim vs Emacs, parece que no hay una solución definitiva (o seguida por todo el mundo de forma generalizada).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Crear usuarios (usando recursos nativos) en Kubernetes 1.19&#43;</title>
      <link>https://onthedock.github.io/post/211205-crear-usuarios-usando-recursos-nativos-en-kubernetes-1.19/</link>
      <pubDate>Sun, 05 Dec 2021 19:57:28 +0100</pubDate>
      
      <guid>https://onthedock.github.io/post/211205-crear-usuarios-usando-recursos-nativos-en-kubernetes-1.19/</guid>
      <description>&lt;p&gt;Hace unas entradas, en &lt;a href=&#34;https://onthedock.github.io/post/211010-crear-usuarios-en-k3s/&#34;&gt;
Crear usuarios en Kubernetes (y en K3s)&lt;/a&gt;, escribía sobre cómo generar nuevos usuarios con acceso al clúster de Kubernetes usando un fichero &lt;code&gt;kubeconfig&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;El método descrito implicaba extraer fuera del clúster el certificado privado de la entidad certificadora (CA) de Kubernetes, lo que no me parecía la mejor solución.&lt;/p&gt;
&lt;p&gt;Desde Kubernetes 1.19 existe un nuevo recurso en la API, el &lt;code&gt;CertificateSigningRequest&lt;/code&gt;, que permite firmar certificados para proporcionar acceso (por ejemplo) al clúster.&lt;/p&gt;
&lt;p&gt;En esta entrada se describe cómo aprovechar esta nueva funcionalidad para dar acceso a un usuario usando un certificado firmado por la CA del clúster.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
