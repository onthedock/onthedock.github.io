<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aws on On The Dock</title>
    <link>https://onthedock.github.io/tags/aws/</link>
    <description>Recent content in aws on On The Dock</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Handmade with &amp;#9829; by Xavi Aznar</copyright>
    <lastBuildDate>Thu, 28 May 2020 19:54:41 +0200</lastBuildDate><atom:link href="https://onthedock.github.io/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Prevenir sustos al eliminar stacks de CloudFormation</title>
      <link>https://onthedock.github.io/post/200528-prevenir-sustos-al-eliminar-stacks/</link>
      <pubDate>Thu, 28 May 2020 19:54:41 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/200528-prevenir-sustos-al-eliminar-stacks/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Actualizado 24 Julio 2020.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Al eliminar un &lt;em&gt;stack&lt;/em&gt; de CloudFormation &lt;strong&gt;todos&lt;/strong&gt; los recursos creados por el &lt;em&gt;stack&lt;/em&gt; se eliminan automáticamente. Esto te puede provocar un buen susto cuando eliminas uno por error&amp;hellip;&lt;/p&gt;
&lt;p&gt;En esta entrada indico cómo prevenir esas situaciones a diferentes niveles: aplicando &lt;em&gt;stack policies&lt;/em&gt; a todo el &lt;em&gt;stack&lt;/em&gt; o de forma individual en algunos recursos con &lt;em&gt;DeletionPolicy&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Descarga de objetos privados desde S3 usando presigned URLs</title>
      <link>https://onthedock.github.io/post/200517-descarga-objetos-privados-desde-un-bucket-usando-presigned-urls/</link>
      <pubDate>Sun, 17 May 2020 19:10:08 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/200517-descarga-objetos-privados-desde-un-bucket-usando-presigned-urls/</guid>
      <description>&lt;p&gt;El acceso a los objetos almacenados en &lt;em&gt;buckets&lt;/em&gt; S3, como en la mayoría de recursos en AWS, está restringido a aquellos usuarios con permisos para realizar acciones sobre ellos.&lt;/p&gt;
&lt;p&gt;Sin embargo, en algunas situaciones, puedes tener que proporcionar acceso a ficheros en un &lt;em&gt;bucket&lt;/em&gt; pero no es viable asignar permisos a quien tiene que acceder (por ejemplo, son usuarios anónimos). La solución más sencilla sería proporcionar acceso público a esos ficheros, pero esta opción no siempre es posible (por ejemplo, cuando se trata de datos específicos para un usuario).&lt;/p&gt;
&lt;p&gt;Afortunadamente, existe una solución para este aparente dilema: las URLs &amp;ldquo;pre-firmadas&amp;rdquo; (&lt;em&gt;presigned URLs&lt;/em&gt;).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tipos de Principals en AWS</title>
      <link>https://onthedock.github.io/post/200510-tipos-de-principals-en-aws/</link>
      <pubDate>Sun, 10 May 2020 09:01:57 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/200510-tipos-de-principals-en-aws/</guid>
      <description>&lt;p&gt;En la entrada anterior &lt;a href=&#34;https://onthedock.github.io/post/200510-prueba-de-concepto-de-notificaciones-via-sns-para-cfn/&#34;&gt;Prueba de Concepto de notificaciones via CloudWatch Events desde CloudFormation (sin Lambdas)&lt;/a&gt; el primer intento de enviar notificaciones al &lt;em&gt;topic&lt;/em&gt; a través de CloudFormation falló, aunque estaba autenticado en AWS con un usuario Administrador y las pruebas realizadas de envío de la consola habían sido un éxito.&lt;/p&gt;
&lt;p&gt;El problema estaba en el &lt;em&gt;Principal&lt;/em&gt; con permisos sobre el &lt;em&gt;topic&lt;/em&gt;, por lo que tuve que cambiar de &lt;code&gt;&amp;quot;Principal&amp;quot;: {&amp;quot;AWS&amp;quot;: &amp;quot;*&amp;quot; }&lt;/code&gt; a &lt;code&gt;&amp;quot;Principal&amp;quot;: { &amp;quot;Service&amp;quot;: &amp;quot;events.amazonaws.com&amp;quot; }&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;En esta entrada intento explicar la diferencia entre estos los diferentes tipos de &lt;em&gt;Principals&lt;/em&gt; y su uso en las políticas.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Prueba de Concepto de notificaciones via CloudWatch Events desde CloudFormation (sin Lambdas)</title>
      <link>https://onthedock.github.io/post/200510-prueba-de-concepto-de-notificaciones-via-sns-para-cfn/</link>
      <pubDate>Sun, 10 May 2020 00:42:51 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/200510-prueba-de-concepto-de-notificaciones-via-sns-para-cfn/</guid>
      <description>&lt;p&gt;En la entrada &lt;a href=&#34;https://onthedock.github.io/post/200507-envio-de-eventos-de-cfn-a-cwevents/&#34;&gt;Envío de eventos de CloudFormation a CloudWatch Events&lt;/a&gt; explicaba una manera alternativa -sin Lambdas- para enviar notificaciones SNS con información de ARNs de recursos generados en CloudFormation a través de CloudWatch Events.&lt;/p&gt;
&lt;p&gt;En esta entrada explico cómo he realizado una prueba de concepto para validar que es viable.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Envío de eventos de CloudFormation a CloudWatch Events</title>
      <link>https://onthedock.github.io/post/200507-envio-de-eventos-de-cfn-a-cwevents/</link>
      <pubDate>Thu, 07 May 2020 19:25:58 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/200507-envio-de-eventos-de-cfn-a-cwevents/</guid>
      <description>&lt;p&gt;Recientemente ha surgido la necesidad de notificar por correo valores como respuesta a la creación de recursos vía CloudFormation. En la notificación debe incluirse información relativa a los recursos creados en el &lt;em&gt;stack&lt;/em&gt; (como el ARN de un rol o el ID de un &lt;em&gt;security group&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;La solución habitual/recomendada es ejecutar una Lambda que envíe un mensaje a un &lt;em&gt;topic&lt;/em&gt; SNS configurado para enviar un correo con el ARN del rol recién creado, por ejemplo. En la &lt;a href=&#34;https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-rollback-email/&#34;&gt;propuesta del Soporte Premium de AWS&lt;/a&gt; se lanza la notificación cuando se produce un &lt;em&gt;rollback&lt;/em&gt; del &lt;em&gt;stack&lt;/em&gt;, pero se podría modificar el evento para lanzar la notificación con &lt;code&gt;CREATION_COMPLETE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;En este ejemplo se envía el error que se ha producido en la notificación, pero podría modificarse para incluir alguna otra información generada en tiempo de ejecución (como el ARN o ID de algún recurso creado por el &lt;em&gt;stack&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Sin embargo en este artículo exploro una vía alternativa que, en mi opinión, puede ser más adecuada en determinados escenarios y que permite no tener que escribir ni una línea de código (usando sólo servicios de AWS).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cómo leer parámetros de Systems Manager Parameter Store usando Boto3</title>
      <link>https://onthedock.github.io/post/191206-aws-sdk-leer-parametros-de-parameterstore/</link>
      <pubDate>Fri, 06 Dec 2019 08:36:22 +0100</pubDate>
      
      <guid>https://onthedock.github.io/post/191206-aws-sdk-leer-parametros-de-parameterstore/</guid>
      <description>&lt;p&gt;AWS ofrece, como parte del servicio Systems Manager (y &lt;a href=&#34;https://aws.amazon.com/systems-manager/pricing/#Parameter_Store&#34;&gt;¡&lt;strong&gt;gratis&lt;/strong&gt;!&lt;/a&gt;) &lt;a href=&#34;https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-parameter-store.html&#34;&gt;Parameter Store&lt;/a&gt;. Como su nombre indica, es un almacén de parámetros que podemos usar para evitar &lt;em&gt;hardcodear&lt;/em&gt; valores de configuración de aplicaciones o scripts.&lt;/p&gt;
&lt;p&gt;La documentación de Boto3, el SDK de AWS para Python es muy buena, pero es tedioso tener que ir consultándola a cada momento.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Esta entrada es una especie de recordatorio personal sencillo sobre cómo acceder a Parameter Store para leer el valor de un parámetro.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Cambio de rol en AWS</title>
      <link>https://onthedock.github.io/post/191123-cambio-de-rol-en-aws/</link>
      <pubDate>Sat, 23 Nov 2019 06:49:30 +0100</pubDate>
      
      <guid>https://onthedock.github.io/post/191123-cambio-de-rol-en-aws/</guid>
      <description>&lt;p&gt;IAM es el servicio de gestión de identidades y accesos de AWS.&lt;/p&gt;
&lt;p&gt;Como &lt;strong&gt;todo&lt;/strong&gt; lo que coloques en el cloud está, por definición, expuesto a internet, la gestión de los permisos es uno de los puntos críticos que debes tener en cuenta.&lt;/p&gt;
&lt;p&gt;A la hora de asignar permisos, siempre hay que aplicar el principio de &lt;strong&gt;least privilege&lt;/strong&gt;, es decir, sólo proporcionar los &lt;strong&gt;mínimos&lt;/strong&gt; permisos necesarios para realizar la tarea a realizar.&lt;/p&gt;
&lt;p&gt;Sin embargo, esto es más sencillo de decir que de hacer, así que muchas veces se trata de un proceso iterativo: asignas permisos a un rol, intentas realizar alguna acción, la acción falla porque falta algún permiso&amp;hellip; Como sólo puedes tener asignado un rol en cada momento, tienes que buscar una forma en la que cambiar entre el rol con permisos y el rol que estás creando de manera sencilla y ágil.&lt;/p&gt;
&lt;p&gt;En esta entrada, creamos un rol &lt;em&gt;de laboratorio&lt;/em&gt; asumible desde la misma cuenta en el que ir asignando políticas para realizar el &lt;em&gt;refinado&lt;/em&gt; de las políticas de la manera más cómoda posible.&lt;/p&gt;
&lt;p&gt;También puedes crear roles específicos para tareas de administración, etc y así usar un rol con permisos acotados en cada momento, cambiando al rol adecuado para realizar cada tarea.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Configuración de awscli-login</title>
      <link>https://onthedock.github.io/post/190830-configuracion-de-awscli-login/</link>
      <pubDate>Fri, 30 Aug 2019 23:07:34 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/190830-configuracion-de-awscli-login/</guid>
      <description>&lt;p&gt;Uno de los problemas de usar usuarios IAM con acceso programático a los recursos en AWS es la seguridad de la &lt;em&gt;secret key&lt;/em&gt; (incluso habilitando la seguridad con varios factores de autenticación (MFA)).&lt;/p&gt;
&lt;p&gt;Cuando un trabajador deja de estar vinculado a la empresa, existen procesos que se encargan de &lt;em&gt;decomisionar&lt;/em&gt; los elementos asociados al ex-trabajador; en particular, se elimina el acceso a los sistemas a los que tuviera acceso mediante la desactivación de las cuentas del usuario.&lt;/p&gt;
&lt;p&gt;El problema es que los usuarios IAM tienen claves de acceso programático que permiten el acceso a los recursos de manera independiente a los sistemas de gestión de identidad corporativa (generalmente un LDAP) sin necesidad de estar conectados a la red de la empresa.&lt;/p&gt;
&lt;p&gt;Aunque la solución más directa parece la modificación del proceso de baja para incluir anulación de los usuarios IAM, lo ideal es conseguir acceso programático a AWS con &lt;strong&gt;credenciales federadas&lt;/strong&gt;, es decir, centralizando la autenticación en el sistema de gestión de identidades de la empresa.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nuevo usuario IAM en AWS</title>
      <link>https://onthedock.github.io/post/190827-nuevo-usuario-iam-en-aws/</link>
      <pubDate>Tue, 27 Aug 2019 19:52:01 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/190827-nuevo-usuario-iam-en-aws/</guid>
      <description>&lt;p&gt;Al final de la &lt;a href=&#34;https://onthedock.github.io/post/190820-instala-aws-cli/&#34;&gt;entrada anterior&lt;/a&gt; indicaba que para empezar a usar tu cuenta de AWS necesitas un usuario.&lt;/p&gt;
&lt;p&gt;A continuación comento cómo crear un usuario IAM.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Instala la herramienta de línea de comandos de AWS</title>
      <link>https://onthedock.github.io/post/190820-instala-aws-cli/</link>
      <pubDate>Tue, 20 Aug 2019 19:48:20 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/190820-instala-aws-cli/</guid>
      <description>&lt;p&gt;Los primeros pasos en el cloud de Amazon se dan a través de la consola web de AWS.&lt;/p&gt;
&lt;p&gt;Sin embargo, la verdadera potencia de AWS es que todas las acciones que se realizan a través de la consola se pueden ejecutar desde la línea de comandos.&lt;/p&gt;
&lt;p&gt;Y si pueden ejecutarse desde la línea de comandos, pueden &lt;strong&gt;automatizarse&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Ahí es donde empieza lo interesante&amp;hellip;&lt;/p&gt;
&lt;p&gt;Pero antes necesitamos instalar &lt;code&gt;aws-cli&lt;/code&gt; (o simplemente &lt;code&gt;aws&lt;/code&gt;), la herramienta de línea de comandos para interaccionar con la API de AWS.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Instance Scheduler Cross Account</title>
      <link>https://onthedock.github.io/post/190529-instance-scheduler-cross-account/</link>
      <pubDate>Wed, 29 May 2019 19:47:29 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/190529-instance-scheduler-cross-account/</guid>
      <description>&lt;p&gt;En la entrada &lt;a href=&#34;https://onthedock.github.io/post/190526-aws-instance-scheduler/&#34;&gt;AWS Instance Scheduler&lt;/a&gt; indicaba cómo configurar AWS Instance Scheduler en una cuenta. Sin embargo, una de las capacidades más interesantes de esta solución de Amazon es la posibilidad de programar el encendido (y/o apagado) de instancias en diferentes cuentas.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Session Manager como herramienta de control de acceso a instancias EC2 en AWS</title>
      <link>https://onthedock.github.io/post/190527-aws-session-manager/</link>
      <pubDate>Mon, 27 May 2019 19:33:13 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/190527-aws-session-manager/</guid>
      <description>&lt;p&gt;Uno de los problemas habituales en un entorno cloud es cómo gestionar el acceso a las instancias del cloud de forma controlada y segura. Session Manager es un servicio de AWS que resuelve este problema y que además es gratuito.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AWS Instance Scheduler</title>
      <link>https://onthedock.github.io/post/190526-aws-instance-scheduler/</link>
      <pubDate>Sun, 26 May 2019 14:07:10 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/190526-aws-instance-scheduler/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/solutions/latest/instance-scheduler/welcome.html&#34;&gt;AWS Instance Scheduler&lt;/a&gt; permite gestionar el arranque y parada automáticos de instancias EC2 y bases de datos del servicio AWS RDS de forma programada.
Esta es una de las formas más sencillas de ahorrar en el uso de estos servicios de AWS: apagándolos cuando no se necesitan (por ejemplo en entornos de desarrollo o de test).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Probando Amazon Linux 2</title>
      <link>https://onthedock.github.io/post/190101-amazon-linux/</link>
      <pubDate>Tue, 01 Jan 2019 16:43:58 +0100</pubDate>
      
      <guid>https://onthedock.github.io/post/190101-amazon-linux/</guid>
      <description>&lt;figure&gt;
    &lt;img src=&#34;https://onthedock.github.io/images/190101/what-are-clouds-made-of.jpg&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Como dice el chiste, las nubes están compuestas básicamente de servidores Linux. Una de estas nubes, Amazon Web Services (AWS), ofrece su propia distribución de Linux: &lt;a href=&#34;http://amazonlinux.com&#34;&gt;Amazon Linux 2&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
